return(corvalues)
}
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
corvalues <- c()
for (file in files_list) {
sub <- read.csv(fi  le)
if (threshold<sum(complete.cases(sub))) {
corvalues <- append(corvalues, cor(sub$sulfate, sub$nitrate, use = "complete.obs"))
}
}
return(corvalues)
}
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
corvalues <- c()
for (file in files_list) {
sub <- read.csv(fi  le)
if (threshold<sum(complete.cases(sub))) {
corvalues <- append(corvalues, cor(sub$sulfate, sub$nitrate, use = "complete.obs"))
}
}
return(corvalues)
}
corr <- function(directory, threshold = 0){
files_list <- list.files(directory, full.names=TRUE)
corvalues <- c()
for (file in files_list) {
sub <- read.csv(file)
if (threshold<sum(complete.cases(sub))) {
corvalues <- append(corvalues, cor(sub$sulfate, sub$nitrate, use = "complete.obs"))
}
}
return(corvalues)
}
corr <- function(directory, threshold = 0){
files_list <- list.files(directory, full.names=TRUE)
corvalues <- c()
for (file in files_list) {
sub <- read.csv(file)
if (threshold<sum(complete.cases(sub))) {
corvalues <- append(corvalues, cor(sub$sulfate, sub$nitrate, use = "complete.obs"))
}
}
return(corvalues)
}
submit()
sumbit()
sumbit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
sumbit()
1
1
2
?matrix
makeCacheMatrix <- function(x=matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- inverse
getinv <- function() m
list(set = set, get = get, setinv =setinv, getinv = getinv)
}
makeCacheMatrix <- function(x=matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- inverse
getinv <- function() m
list(set = set, get = get, setinv =setinv, getinv = getinv)
}
makeCacheMatrix <- function(x=matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- inverse
getinv <- function() m
list(set = set, get = get, setinv =setinv, getinv = getinv)
}
cacheSolve <- function(x,...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?which
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
texas <- which(data[,"State"]=="TX")
texas <- which(data[,"State"]=="TX")
texas <- which(data[,"State"]=="TX")
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(substate[,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"], )
sucess$Hospital.Name
}
}
is.dataframe(texas)
?is.dataframe
best("TX","heart attack")
best("TX","heart attack")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"], )
sucess$Hospital.Name
}
}
?min
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best("TX","heart attack")
Q
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best("TX","heart attack")
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
Q
Q
c
c
n
n
best("TX","heart attack")
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best <- function(state, outcome){
data <-  read.csv("outcome-of-care-measures.csv")
##Checking for valid state
states <- as.vector(data$State)
if(state %in% states == F) {
stop()
}
##Checking for valid outcome
val.out <- c("heart attack","heart failure","pneumonia")
if(outcome %in% val.out == F){
stop()
}
##subseting for state
substate <- which(data[,"State"]== state)
if(outcome == "heart attack"){
sucess <-min(data[substate,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=T )
sucess$Hospital.Name
}
}
best("TX","heart attack")
data <-  read.csv("outcome-of-care-measures.csv")
##subseting for state
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
data <-  read.csv("outcome-of-care-measures.csv")
summary(data)
x <- 4L
class(x)
x <- c(4, "a", TRUE)
x <- c(4, "a", TRUE)
x <- c(1,3, 5)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
dat <-rbind(dat, read.csv(files_list[i]))
}
mean(dat[,pollutant], na.rm=T)
}
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in id){
dat <-rbind(dat, read.csv(files_list[i]))
}
nobs <- c()
for (i in id) {
nobs <- append(nobs, sum(as.numeric(complete.cases(dat[which(dat[,"ID"]==i),]))))
}
data.frame(id,nobs)
}
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in id){
dat <-rbind(dat, read.csv(files_list[i]))
}
nobs <- c()
for (i in id) {
nobs <- append(nobs, sum(as.numeric(complete.cases(dat[which(dat[,"ID"]==i),]))))
}
data.frame(id,nobs)
}
files_full <- list.files("specdata", full.names=TRUE)
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in id){
dat <-rbind(dat, read.csv(files_list[i]))
}
nobs <- c()
for (i in id) {
nobs <- append(nobs, sum(as.numeric(complete.cases(dat[which(dat[,"ID"]==i),]))))
}
data.frame(id,nobs)
}
files_full <- list.files("specdata", full.names=TRUE)
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in id){
dat <-rbind(dat, read.csv(files_list[i]))
}
nobs <- c()
for (i in id) {
nobs <- append(nobs, sum(as.numeric(complete.cases(dat[which(dat[,"ID"]==i),]))))
}
data.frame(id,nobs)
}
submit()
1
submit()
0
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
setwd("C:/Users/Jeanette/datasciencecoursera/Geting and Cleaning Data/classproject/Data")
library("plyr", lib.loc="~/R/win-library/3.1")
setwd("C:/Users/Jeanette/datasciencecoursera/Geting and Cleaning Data/classproject/Data")
test.subject <- read.table(".\\test\\subject_test.txt")
train.subject <- read.table(".\\train\\subject_train.txt")
join.subject <- rbind(train.subject, test.subject)
test.set <- read.table(".\\test\\X_test.txt")
